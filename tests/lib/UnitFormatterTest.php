<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-03 at 17:29:07.
 */
class UnitFormatterTest extends PHPUnit_Framework_TestCase {

    /**
     * @var UnitFormatter
     */
    protected $formatter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->formatter = new UnitFormatter();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testFormatBytes() {
        $this->formatter = new UnitFormatter();

        $this->assertEquals($this->formatter->formatBytes(1023), "1023 B");
        $this->assertEquals($this->formatter->formatBytes(1023, -1), "1023 B");
        $this->assertEquals($this->formatter->formatBytes(1024), "1 KiB");
        $this->assertEquals($this->formatter->formatBytes(1024 + 50), "1.05 KiB");
        $this->assertEquals($this->formatter->formatBytes(1024 + 50, 1), "1 KiB");
        $this->assertEquals($this->formatter->formatBytes(1024 + 500, 1), "1.5 KiB");
        $this->assertEquals($this->formatter->formatBytes(1024 * 1023), "1023 KiB");
        $this->assertEquals($this->formatter->formatBytes(1024 * 1023 + 10), "1023.01 KiB");

        $this->assertEquals($this->formatter->formatBytes(999, 2, true), "999 B");
        $this->assertEquals($this->formatter->formatBytes(1000, 2, true), "1 KB");
        $this->assertEquals($this->formatter->formatBytes(1000 * 1000, 2, true), "1 MB");

        $this->formatter->thousand_seperator = " ";
        $this->assertEquals($this->formatter->formatBytes(1023), "1 023 B");

        $this->formatter->decimal_seperator = ",";
        $this->assertEquals($this->formatter->formatBytes(1024 * 1024 + 1024 * 10), "1,01 MiB");

        $this->formatter = new UnitFormatter(2, "fr");
        $this->assertEquals($this->formatter->formatBytes(1024), "1 Kio");
        $this->assertEquals($this->formatter->formatBytes(50), "50 o");
        $this->assertEquals($this->formatter->formatBytes("fsdfsd"), "'fsdfsd' is not a number!");
    }

    public function testConstructor() {
        $this->formatter = new UnitFormatter();
        $this->assertEquals($this->formatter->decimal_seperator, ".");
        $this->assertEquals($this->formatter->thousand_seperator, "");
        $this->assertEquals($this->formatter->lang, "en");
        $this->assertEquals($this->formatter->precision, 2);

        $this->formatter = new UnitFormatter(2, "fr");
        $this->assertEquals($this->formatter->decimal_seperator, ",");
        $this->assertEquals($this->formatter->thousand_seperator, "");
        $this->assertEquals($this->formatter->lang, "fr");
        $this->assertEquals($this->formatter->precision, 2);
    }

}
